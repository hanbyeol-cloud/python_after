#%%

"""
다양체와 데이터 변환

하나의 물건을 바라볼 때 앞 옆 뒤
바라볼때마다 모양이 다름

행렬연산
다차원 척도법(MDS : Multi Dimensional Scaling)
- 데이터간의 거리를 행렬로 표현*(모든 데이터 끼리의 거리값)
- 데이터의 특정 관계를 보존하는 데이터의 저차원을 발견
- 고차원 공간으로의 데이터 회전, 이동, 척도화로 구성된 선형 임베딩
- 비선형인 경우 임베딩 실패
- 분석을 위한 목적이 아닌 시각화를 하기 위한 목적 -> 임의의 축을 사용했기 때문에 
- 변환행렬을 만회하기 위해 랜덤매트릭스를 만듦 
- 랜덤매트릭스 거듭제곱 => 정방행렬, 전체행렬에서 고유값분해 -> 고유값과 고유벡터가 나옴
    고유벡터의 특성 : 행과 열 방향으로 정직교 -> 2-3개의 축을 남김 (기하학적으로 축으로 사용 가능) = MDS
    직교축을 마련 => 행렬 거듭제곱 특성 : 정방행렬, 대칭행렬
    임의의 매트릭스를 만들 때 앞에 있는 (앞에 있는 모든 변수가 참여) 행의 갯수가 맞아야 함
    하나의 축에 투영, 나머지의 변수들을 고려해서 들어옴
    한 축에서 데이터가 어디에 있는지 어떻게 표현되는지
    행렬에는 나눗셈이 없어서 역행렬을 만들어야함
    분석의 용도 X / 시각화 O

LLE(Locallyy Linear Embedding)
- 국소임베딩
- 인첩한 데이터 간의 거리만 보존
    100개의 데이터가 있으면 근접한 10개만 고려하여 데이터를 재표현 -> 차원축소
- 차원의 저주
    데이터가 많아지면 차수가 증가 -> 과적합 

등거리 사상(Lsomap, Ispmetric Mapping)
- 면에 따라 펼처진 거리값 
- ex) 슈퍼마리오 (2차원을 3차원같이)


선형대수 -> 선형변환
선형공간 -> 비선형공간으로 mapping 


"""

# %%


"""

선형
PCA(principle component analysis) 주성분 분석
- 공분산 또는 상관계수 행렬 = 정방행렬, 대칭행렬
- 축의 표현방법(모든 축이 참여한 축)
- 데이터를 새로운 축에 projection
- 고유벡터는 축을 표현 (새로운 축으로 변환)
- 고유값(분산크기의 역순정렬) + 고유벡터(정직교)
    - 다중공산성이 존재하지 않는 최적의 직교축
- 왜~!하냐? =>  주성분을 찾기 위해
    -> noise가 사라짐
- (중요하지 않은)변수가 많아지게 되어지면 과적합 ----> 중요하지 않는 변수를 버려버려
    -> 데이터를 직교축에 재표현
    직교축을 발견하게되어지면 다중공선성이 없어짐  -> 두 변수간 상관관계가 생김 (직교축에 존재하지 않음)
    직교축을 구할 때 변수간의 공분산 상관계수행렬을 구해야함 
    변수 갯수만큼 행 열로 만들어짐
    서로간의 관계를 주기 때문에 대칭행렬, 정방행렬 -> 고유값 분해가 나옴 
    -> 고유값(정직교하는 분산 : 분산이 크면 중요한 변수, 없으면 의미없는 변수)과 고유벡터(정직교)가 나옴
    공분산 - 두개의 변수간의 관계 
    상관계수 - 표준화 되어있음 
    
    고유값 & 고유벡터
    축을 중심 -> 데이터는 변환시켜주어야 함 -> 축으로 변환된 데이터로 분석
    변환되어진 값으로 데이터가 나옸으면 변환되기전 데이터로 돌아와야함

    주성분 갯수만큼 이루어진 축 & 뒤에 있는 축과 열의 행렬이 일치
    앞에 있는 변수로 표현됨
    데이터의 변환 


PCA 단점 
- 선형인 데이터에만 적용 가능 
- 비선형에는 참여 불가능


PCA 단점 극복
- KernelPCA : 데이터를 다른 차원으로 보낸 후 재표현 
- SparsePC : 희소한 데이터를 다룰 때 (희소행렬) -> SVD 특이행렬분해
- TruncatedSVD : 0인것을 제외시키고 차원을 축소
- IncrementalPCA : 조금씩 읽어들여서 합치는것

고유값분해는 정방행렬에만 가능

특이행렬분해 in 고유값분해 

"""

# %%



# %%



